import React, { useEffect, useState } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../../styles/Home.module.css'
import Router from 'next/router';
import WalletConnectProvider from "@walletconnect/web3-provider";
import { useForm, Controller } from "react-hook-form";
import WalletLink from "walletlink";
import Select from 'react-select'
import { ethers } from "ethers";
import Web3Modal from "web3modal";
import { createUnparsedSourceFile } from 'typescript';
import { hashCode } from './../../lib/utils'


const networks = [{
    value: 100, label: "Gnosis Chain"
}, {
    value: 137, label: "Polygon"
}, {
    value: 1, label: "Ethereum"
}, {
    value: 4, label: "Rinkeby"
}]

const Create = () => {
    const [signer, setSigner] = useState(null)
    const { register, handleSubmit, control } = useForm();

    const onSubmit = async ({
        title,
        preview,
        content,
        lock,
        network
    }) => {
        const paywallConfig = {
            locks: {
            },
            pessimistic: true,
        }
        // Customize
        paywallConfig.locks[lock] = {
            network: network
        }

        const alphatwt = {
            paywallConfig,
            title,
            preview,
            content
        }


        const payload = JSON.stringify(alphatwt);
        const message = `I'd like to create an AlphaTwt!\nHash: ${hashCode(payload)}\nTime: ${new Date().toISOString()}`
        const signature = await signer.signMessage(message);
        const post = await fetch('/api/alphatwt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Signature': 'signature'
            },
            body: JSON.stringify({
                alphatwt,
                signature,
                message
            }),
        });
        console.log("redirect to post page, based on its id.")

    }

    const connectWallet = async (e) => {
        const providerOptions = {
            // Example with WalletConnect provider
            walletconnect: {
                package: WalletConnectProvider,
                options: {
                    infuraId: "8043bb2cf99347b1bfadfb233c5325c0"
                }

            },
            walletlink: {
                package: WalletLink,
                options: {
                    infuraId: "8043bb2cf99347b1bfadfb233c5325c0"
                }
            }

        };

        const web3Modal = new Web3Modal({
            cacheProvider: false,
            providerOptions // required
        });

        const instance = await web3Modal.connect();

        const provider = new ethers.providers.Web3Provider(instance);
        setSigner(provider.getSigner());
    }



    return (
        <div className={styles.container}>
            <Head>
                <title>Create AlphaTwt</title>
                <meta name="description" content="Generated by AlphaTwt" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                {!signer && <p>
                    <button onClick={connectWallet}>Connect your wallet!</button>

                </p>}
                {signer &&
                    <form onSubmit={handleSubmit(onSubmit)}>
                        <p>
                            <label>
                                Title:
                                <input defaultValue="test" {...register("title", { required: true })} />
                            </label>
                        </p>
                        <p>
                            <label>
                                Preview:
                                <textarea {...register("preview", { required: true })} />
                            </label>
                        </p>
                        <p>
                            <label>
                                Content:
                                <textarea {...register("content", { required: true })} />
                            </label>

                        </p>


                        <p>
                            <label>
                                Network:
                                <Controller
                                    required
                                    control={control}
                                    name="network"
                                    render={({ field: { onChange, value, ref } }) => (
                                        <Select
                                            inputRef={ref}
                                            value={networks.find(opt => opt.value == value)}
                                            onChange={(option) => onChange(option.value)}
                                            options={networks}
                                        />
                                    )}
                                />
                            </label>

                        </p>

                        <p>
                            <label>
                                Lock:
                                <input placeholder='0x....' {...register("lock", {
                                    required: true,
                                    validate: (value) => {
                                        return !!value.match(/^0x[a-fA-F0-9]{40}$/)
                                    }

                                })} />
                            </label>

                        </p>
                        <p>

                            <input type="submit" />
                        </p>
                    </form>}

            </main>
        </div>


    );
};

export default Create;